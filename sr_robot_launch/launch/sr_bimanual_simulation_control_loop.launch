<launch>
  <arg name="debug" default="false"/>
  <arg name="verbose" default="true"/>
  <arg name="robot_state_pub_frequency" default="250"/>
  <arg name="joint_state_pub_frequency" default="125"/>
  <!-- Set to false if you want to start without guis -->
  <arg name="gui" default="true"/>
  <!-- Whether to load a scene to restrain the movement of the robot -->
  <arg name="scene" default="false"/>
  <!-- Set world value dependant on scene -->
  <arg name="world" default="$(find sr_description_common)/worlds/shadowhands_and_arms.world"/>

  <!-- ROBOT CONFIGS -->
  <arg name="arms" default="true"/>
  <!-- Specify if the system has "both" hands, only "right", only "left" or "none" hands-->
  <arg name="hands" default="both"/>
  <!-- Set to true if you want the robot to start in the "home" positions -->
  <arg name="start_home" default="false"/>
  <!-- home_angles must be input at the launch -->
  <arg name="home_angles" default=""/>

  <!-- HAND RELATED CONFIG-->
  <!-- Wheather the hands have biotacs -->
  <arg name="biotac" default="false"/>
  <!-- Set to true to spawn the position controllers for the hands-->
  <arg name="hand_ctrl" unless="$(eval hands == 'none')" default="true"/>
  <arg name="hand_ctrl" if="$(eval hands == 'none')" default="false"/>
  <!-- Set to true to spawn trajectory controllers for the hands(the trajectory controller overwrites continuously the joint position command, preventing direct control via topics-->
  <arg name="hand_trajectory" default="true"/>
  <!-- Set to true if you want to use hybrid controller -->
  <arg name="hybrid_controller" default="false"/>

  <!-- Robot description related config-->
  <arg unless="$(arg arms)" name="robot_name" default="bimanual_shadowhand_motor"/>
  <arg name="hand_x_separation" default="-0.4"/>

  <!-- ARM RELATED CONFIG-->
  <!-- Whether to run arm controllers. -->
  <arg name="arm_ctrl" default="$(arg arms)"/>
  <!-- Set to true to spawn trajectory controllers for the arms (the trajectory controller overwrites continuously the joint position command, preventing direct control via topics-->
  <arg name="arm_trajectory" default="$(arg arms)"/>
  <!-- Set to true to spawn group position controllers for the arms -->
  <arg name="arm_position" default="$(eval not arm_trajectory and arms)"/>

  <!-- Robot description related config-->
  <arg name="robot_model" default="ur10e"/>
  <arg name="arm_x_separation" default="1.0"/>
  <arg name="arm_y_separation" default="1.0"/>
  <arg name="arm_1_z" default="0.0"/>
  <arg name="arm_2_z" default="0.0"/>
  <arg if="$(arg arms)" name="robot_name" default="$(arg robot_model)srh"/>

  <!-- ROBOT CONFIG FILES-->
  <!-- Hands and arms -->
  <arg name="robot_config_file" if="$(eval not arg('hands') == 'none' and arg('arm_ctrl'))" default="$(find sr_multi_moveit_config)/config/robot_configs/bimanual_sh_$(arg robot_model).yaml"/>
  <!-- Arms but no hands -->
  <arg name="robot_config_file" if="$(eval arg('hands') == 'none' and arg('arm_ctrl'))" default="$(find sr_multi_moveit_config)/config/robot_configs/bimanual_$(arg robot_model).yaml"/>
  <!-- Hands but no arms -->
  <arg name="robot_config_file" if="$(eval not arg('hands') == 'none' and not arg('arm_ctrl'))" default="$(find sr_multi_moveit_config)/config/robot_configs/bimanual_sh.yaml"/>

  <!-- Set robot config file path in a param in case moveit nodes need it -->
  <param name="robot_config_file" value="$(arg robot_config_file)" type="str"/>
  <!-- Launch rosparam for payload. If we only use hand and no arm the extra values wont be used-->
  <rosparam file="$(arg robot_config_file)"/>

  <!-- LOADING ROBOT DESCRIPTION-->
  <include file="$(find sr_robot_launch)/launch/load_robot_description_bimanual.launch">
    <arg name="sim" value="true"/>
    <arg name="arms" value="$(arg arms)"/>
    <arg name="hands" value="$(arg hands)"/>
    <arg name="robot_model" value="$(arg robot_model)"/>
    <arg name="hand_x_separation" value="$(arg hand_x_separation)"/>
    <arg name="arm_x_separation" value="$(arg arm_x_separation)"/>
    <arg name="arm_y_separation" value="$(arg arm_y_separation)"/>
    <arg name="arm_1_z" value="$(arg arm_1_z)"/>
    <arg name="arm_2_z" value="$(arg arm_2_z)"/>
    <arg name="biotac" value="$(arg biotac)"/>
  </include>

  <!-- RUNNING THE SIMULATION -->
  <!-- Mock hand data for simulation -->
  <param name="/hand/mapping/0" value="rh"/>
  <param name="/hand/mapping/1" value="lh"/>
  <param name="/hand/joint_prefix/0" value="rh_"/>
  <param name="/hand/joint_prefix/1" value="lh_"/>

  <param name="/use_sim_time" value="true"/>
  <env name="GAZEBO_MODEL_PATH" value="$(find sr_description_common)/models/" />
  <env name="GAZEBO_MODEL_DATABASE_URI" value="" />
  <env name="MESH_WORKSPACE_PATH" value="$(find sr_description_common)/models/" />
  <arg name="paused" value="$(arg start_home)"/>
  <arg if="$(arg start_home)" name="spawn_model_extra_args" value="-unpause $(arg home_angles)" />
  <arg unless="$(arg start_home)" name="spawn_model_extra_args" value="" />

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" default="$(arg world)"/>
    <arg name="gui" default="$(arg gui)"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="verbose" value="$(arg verbose)" />
  </include>

  <node name="spawn_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model $(arg robot_name) $(arg spawn_model_extra_args)" respawn="false" output="screen"/>

  <include file="$(find ros_ethercat_model)/launch/joint_state_publisher.launch" >
    <arg name="publish_rate" value="$(arg joint_state_pub_frequency)"/>
  </include>

  <!-- Robot state publisher -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="$(arg robot_state_pub_frequency)"/>
    <param name="tf_prefix" type="string" value="" />
  </node>

  <!-- Set scene for robot - restrains movement -->
  <group if="$(arg scene)">
    <include file="$(find gazebo2rviz)/launch/gazebo2moveit.launch">
      <arg name="frequency" default="1" />
    </include>
  </group>

  <!-- ARM SPECIFIC -->
  <group if="$(arg arm_trajectory)">
    <rosparam file="$(find sr_robot_launch)/config/gazebo/controller/ra_trajectory_controller.yaml" command="load"/>
    <rosparam file="$(find sr_robot_launch)/config/gazebo/controller/la_trajectory_controller.yaml" command="load"/>
    <node name="arm_trajectory_controller_spawner" pkg="controller_manager" type="spawner" output="screen" args="ra_trajectory_controller la_trajectory_controller"/>
  </group>

  <group if="$(arg arm_position)">
    <rosparam file="$(find sr_robot_launch)/config/gazebo/controller/ra_group_position_controller.yaml" command="load"/>
    <rosparam file="$(find sr_robot_launch)/config/gazebo/controller/la_group_position_controller.yaml" command="load"/>
    <node name="arm_group_position_controller_spawner" pkg="controller_manager" type="spawner" output="screen" args="ra_trajectory_controller la_trajectory_controller"/>
    </group>

  <!-- HAND SPECIFIC -->
  <group if="$(eval hands == 'both' or hands == 'right')">
    <rosparam if="$(eval not hybrid_controller)" command="load" file="$(find sr_description)/hand/config/rh_controller_gazebo.yaml"/>
    <rosparam if="$(arg hybrid_controller)" command="load" file="$(find sr_description)/hand/config/rh_hybrid_controller_gazebo.yaml"/>
  </group>

  <group if="$(eval hands == 'both' or hands == 'left')">
    <rosparam if="$(eval not hybrid_controller)" command="load" file="$(find sr_description)/hand/config/lh_controller_gazebo.yaml"/>
    <rosparam if="$(arg hybrid_controller)" command="load" file="$(find sr_description)/hand/config/lh_hybrid_controller_gazebo.yaml"/>
  </group>

  <group if="$(arg hand_ctrl)">
    <arg if="$(arg hybrid_controller)" name="hand_controller_group" default="hybrid"/>
    <arg if="$(eval hand_trajectory and not hybrid_controller)" name="hand_controller_group" default="trajectory"/>
    <arg if="$(eval not hand_trajectory and not hybrid_controller)" name="hand_controller_group" default="position"/>
    <node name="sr_controller_spawner" pkg="sr_utilities" type="controller_spawner.py" output="screen">
      <param name="controller_group" value="$(arg hand_controller_group)"/>
    </node>
  </group>
</launch>
