<launch>
  <arg name="debug" default="false"/>
  <arg name="robot_state_pub_frequency" default="250"/>
  <arg name="joint_state_pub_frequency" default="125"/>

  <!-- ROBOT CONFIG-->
  <arg name="robot_model" default="ur10"/>
  <arg name="side" default="right"/>
  <arg name="side_letter" value="$(eval side[0])"/>
  <arg name="arm_ctrl" default="true"/>
  <arg name="hand_ctrl" default="true"/>
  <!-- HAND AND ARM -->
  <arg name="robot_description" if="$(eval arg('hand_ctrl') and arg('arm_ctrl'))" default="$(find sr_multi_description)/urdf/$(arg side)_srhand_ur10_bt_sp_biotacs.urdf.xacro"/>
  <!-- ARM BUT NO HAND -->
  <arg name="robot_description" if="$(eval not arg('hand_ctrl') and arg('arm_ctrl'))" default="$(find sr_box_ur10_moveit_config)/config/$(arg side_letter)a_ur10_with_box.urdf.xacro"/>
  <arg name="robot_config_file" if="$(arg arm_ctrl)" default="$(find sr_multi_moveit_config)/config/robot_configs/$(arg side)_sh_$(arg robot_model).yaml"/>

  <!-- HANDS CONFIG-->
  <arg name="hand_id" default="rh"/>
  <arg name="hand_serial" default="1082"/>
  <arg name="mapping_path" default="$(find sr_edc_launch)/mappings/default_mappings/$(arg hand_id)_E_v3.yaml"/>
  <arg name="eth_port" default="$(optenv ETHERCAT_PORT enp2s0)"/>
  <arg name="pwm_control" default="true"/>
  <!-- Set to true if you want to use grasp controller -->
  <arg name="grasp_controller" default="false"/>
  <arg name="hand_trajectory" default="true"/>
  <!-- RIGHT HAND BUT NO ARM -->
  <arg name="robot_description" if="$(eval arg('hand_ctrl') and not arg('arm_ctrl') and arg('hand_id')=='rh')" default="$(find sr_description)/robots/shadowhand_motor_plus.urdf.xacro"/>
  <!-- LEFT HAND BUT NO ARM -->
  <arg name="robot_description" if="$(eval arg('hand_ctrl') and not arg('arm_ctrl') and arg('hand_id')=='lh')" default="$(find sr_description)/robots/shadowhand_left_motor_plus.urdf.xacro"/>
  <arg name="robot_config_file" if="$(eval arg('hand_ctrl') and not arg('arm_ctrl'))" default="$(find sr_multi_moveit_config)/config/robot_configs/$(arg side)_sh.yaml"/>

  <!-- ARMS CONFIG-->
  <arg name="initial_z" if="$(arg arm_ctrl)" default="0.7551"/>
  <arg name="initial_z" unless="$(arg arm_ctrl)" default="0.0"/>
  <arg name="arm_id" default="ra"/>
  <arg name="arm_robot_hw" default="$(find sr_robot_launch)/config/$(arg side)_ur_arm_robot_hw.yaml"/>
  <arg name="include_wrist_in_arm_controller" default="true"/>
  <arg name="arm_trajectory" default="true"/>
  <!-- Set to true to spawn the position controllers for the arm-->
  <arg name="arm_position" default="$(eval not arm_trajectory)"/>
  <arg name="arm_speed_scale" default="0.5"/>

  <!-- Logging local topics -->
  <group ns="control_box">
    <include file="$(find sr_logging_common)/launch/sr_rosbag_log.launch">
      <arg name="log_topics" value='-e ".*(controller|debug_etherCAT_data).*" /joint_states /diagnostics /mechanism_statistics'/>
      <arg name="log_bag_prefix" value="sr_hardware_control"/>
      <arg name="log_directory" value="$(optenv HOME)/.ros/log"/>
    </include>
  </group>

  <!-- Controller -->
  <group if="$(arg hand_ctrl)">
    <!-- Launch rosparam for payload if we use hand. If we only use hand and no arm the extra values wont be used-->
    <rosparam file="$(arg robot_config_file)"/>
    <!-- HAND (N.B. Arm robot harware is implicitly started here if ra_sr_ur_robot_hw is present in param /robot_hardware-->
    <include file="$(find sr_edc_launch)/sr_edc_ros_control.launch">
      <arg name="define_robot_hardware" value="false"/>
      <arg name="hand_robot_hardware_name" value="unique_robot_hw"/>
      <arg name="debug" value="$(arg debug)"/>
      <arg name="eth_port" value="$(arg eth_port)"/>
      <arg name="robot_description" value="$(arg robot_description)"/>
      <arg name="pwm_control" value="$(arg pwm_control)"/>
      <arg name="hand_serial" value="$(arg hand_serial)"/>
      <arg name="hand_id" value="$(arg hand_id)"/>
      <arg name="mapping_path" value="$(arg mapping_path)"/>
      <arg name="robot_state_pub_frequency" value="$(arg robot_state_pub_frequency)"/>
      <arg name="joint_state_pub_frequency" value="$(arg joint_state_pub_frequency)"/>
      <arg name="initial_z" value="$(arg initial_z)"/>
    </include>
    <group unless="$(arg grasp_controller)">
      <node name="$(arg hand_id)_trajectory_controller" pkg="sr_utilities" type="trajectory_controller_spawner.py" output="screen">
        <param name="hand_trajectory" value ="$(arg hand_trajectory)"/>
        <param name="exclude_wrist" value="$(arg include_wrist_in_arm_controller)"/>
        <param name="wait_for" value ="calibrated"/>
      </node>
    </group>
    <group if="$(arg grasp_controller)">
      <node name="$(arg hand_id)_grasp_controller" pkg="sr_utilities" type="grasp_controller_spawner.py" output="screen">
        <param name="wait_for" value ="calibrated"/>
      </node>
    </group>
  </group>

  <group if="$(arg arm_ctrl)">
    <rosparam if="$(eval arg('side') == 'right')">
      robot_hardware:
        - unique_robot_hw
        - ra_sr_ur_robot_hw
    </rosparam>
    <rosparam if="$(eval arg('side') == 'left')">
      robot_hardware:
        - unique_robot_hw
        - la_sr_ur_robot_hw
    </rosparam>
    <rosparam command="load" file="$(arg arm_robot_hw)"/>
    <param name="$(arg arm_id)_sr_ur_robot_hw/speed_scale" type="double" value="$(arg arm_speed_scale)"/>
    <param name="$(arg arm_id)_sr_ur_robot_hw/robot_program_path" type="str" value="$(find sr_ur_bringup)/robot_programs/"/>
  </group>

  <rosparam unless="$(arg arm_ctrl)">
    robot_hardware:
      - unique_robot_hw
  </rosparam>

  <!-- These will be loaded if hand_ctrl is false so UR10 with box will load instead. -->
  <group unless="$(arg hand_ctrl)">
    <include file="$(find ros_ethercat_model)/launch/joint_state_publisher.launch">
      <arg name="publish_rate" value="$(arg joint_state_pub_frequency)"/>
    </include>
    <node if="$(arg debug)" name="ur_arm_robot" pkg="ros_control_robot" type="ros_control_robot" args="" output="screen" launch-prefix="gdb -ex run -args"/>
    <node unless="$(arg debug)" name="ur_arm_robot" pkg="ros_control_robot" type="ros_control_robot" args="" output="screen" launch-prefix="ethercat_grant"/>
    <param name="robot_description" command="xacro --inorder $(arg robot_description) initial_z:=$(arg initial_z)"/>
    <rosparam command="load" file="$(find sr_ur_robot_hw)/config/$(arg arm_id)_sr_ur_robot_hw.yaml"/>    
  </group>
  <!-- These will be loaded if arm and hand are enabled -->
  <!-- Trajectory mode -->
  <group if="$(arg arm_ctrl)">
    <group if="$(arg arm_trajectory)">
      <group if="$(arg hand_ctrl)">
        <rosparam if="$(arg include_wrist_in_arm_controller)" command="load" file="$(find sr_robot_launch)/config/$(arg arm_id)_trajectory_controller.yaml"/>
        <rosparam unless="$(arg include_wrist_in_arm_controller)" command="load" file="$(find sr_robot_launch)/config/$(arg arm_id)_trajectory_controller_no_wrist.yaml"/>
      </group>
      <rosparam unless="$(arg hand_ctrl)" command="load" file="$(find sr_ur_launch)/config/ra_trajectory_controller.yaml"/>
      <node if="$(arg hand_ctrl)" name="arm_trajectory_controller_spawner" pkg="controller_manager" type="spawner" output="screen"
            args="--wait-for=/$(arg arm_id)_arm_ready --wait-for=/calibrated $(arg arm_id)_trajectory_controller"/>
      <node unless="$(arg hand_ctrl)" name="arm_trajectory_controller_spawner" pkg="controller_manager" type="spawner" output="screen"
            args="--wait-for=/$(arg arm_id)_arm_ready $(arg arm_id)_trajectory_controller"/>
    </group>
    <!-- Position mode -->
    <group if="$(arg arm_position)">
      <group if="$(arg hand_ctrl)">
        <rosparam if="$(arg include_wrist_in_arm_controller)" command="load" file="$(find sr_robot_launch)/config/$(arg arm_id)_group_position_controller.yaml"/>
        <rosparam unless="$(arg include_wrist_in_arm_controller)" command="load" file="$(find sr_robot_launch)/config/$(arg arm_id)_group_position_controller_no_wrist.yaml"/>
      </group>
      <rosparam unless="$(arg hand_ctrl)" command="load" file="$(find sr_ur_launch)/config/ra_group_position_controller.yaml"/>
      <node if="$(arg hand_ctrl)" name="arm_group_position_controller_spawner" pkg="controller_manager" type="spawner" output="screen"
            args="--wait-for=/$(arg arm_id)_arm_ready --wait-for=/calibrated $(arg arm_id)_group_position_controller"/>
      <node unless="$(arg hand_ctrl)" name="arm_group_position_controller_spawner" pkg="controller_manager" type="spawner" output="screen"
            args="--wait-for=/$(arg arm_id)_arm_ready $(arg arm_id)_group_position_controller"/>
    </group>
  </group>
</launch>
