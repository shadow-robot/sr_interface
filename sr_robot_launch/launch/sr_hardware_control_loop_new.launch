<launch>
  <arg name="debug" default="false"/>
  <arg name="robot_state_pub_frequency" default="100"/>
  <arg name="joint_state_pub_frequency" default="100"/>

  <!-- ROBOT CONFIG-->
  <arg name="robot_model" default="ur10"/>
  <arg name="side" default="right"/>
  <arg name="robot_description" if="$(arg hand_ctrl)" default="'$(find sr_multi_description)/urdf/$(arg side)_srhand_$(arg robot_model)_new_driver.urdf.xacro'"/>
  <arg name="robot_description" unless="$(arg hand_ctrl)" default="'$(find sr_box_ur10_moveit_config)/config/ur10_with_box.urdf.xacro'"/>
  <arg name="robot_config_file" default="$(find sr_multi_moveit_config)/config/robot_configs/$(arg side)_sh_$(arg robot_model).yaml"/>

  <!-- HANDS CONFIG-->
  <arg name="hand_id" default="rh"/>
  <arg name="hand_serial" default="634"/>
  <arg name="mapping_path" default="$(find sr_edc_launch)/mappings/default_mappings/$(arg hand_id)_E_v3.yaml"/>
  <arg name="eth_port" default="enx000ec6bfef7b"/>
  <arg name="hand_ctrl" default="true"/>
  <arg name="pwm_control" default="true"/>
  <!-- Set to true if you want to use grasp controller -->
  <arg name="grasp_controller" default="false"/>
  <arg name="hand_trajectory" default="true"/>

  <!-- ARMS CONFIG-->
  <arg name="initial_z" default="0.7551"/>
  <arg name="arm_id" default="ra"/>
  <arg name="include_wrist_in_arm_controller" default="true"/>
  <arg name="arm_trajectory" default="true"/>
  <!-- Set to true to spawn the position controllers for the arm-->
  <arg name="arm_position" default="$(eval not arm_trajectory)"/>
  <arg name="arm_ctrl" default="true"/>
  <arg name="arm_speed_scale" default="0.5"/>
  <arg name="arm_robot_hw" default="$(find ur_robot_driver)/config/ur_hardware_interface.yaml"/>

  <!-- Logging local topics -->
  <group ns="control_box">
    <include file="$(find sr_logging_common)/launch/sr_rosbag_log.launch">
      <arg name="log_topics" value='-e ".*(controller|debug_etherCAT_data).*" /joint_states /diagnostics /mechanism_statistics'/>
      <arg name="log_bag_prefix" value="sr_hardware_control"/>
      <arg name="log_directory" value="$(optenv HOME)/.ros/log"/>
    </include>
  </group>

  <!-- Controller -->
  <group if="$(arg hand_ctrl)">
    <!-- Launch rosparam for payload if we use hand. If we only use hand and no arm the extra values wont be used-->
    <rosparam file="$(arg robot_config_file)"/>
    <!-- HAND (N.B. Arm robot harware is implicitly started here if ra_sr_ur_robot_hw is present in param /robot_hardware-->
    <include file="$(find sr_edc_launch)/sr_edc_ros_control.launch">
      <arg name="define_robot_hardware" value="false"/>
      <arg name="hand_robot_hardware_name" value="unique_robot_hw"/>
      <arg name="debug" value="$(arg debug)"/>
      <arg name="eth_port" value="$(arg eth_port)"/>
      <arg name="robot_description" value="$(arg robot_description)"/>
      <arg name="pwm_control" value="$(arg pwm_control)"/>
      <arg name="hand_serial" value="$(arg hand_serial)"/>
      <arg name="hand_id" value="$(arg hand_id)"/>
      <arg name="mapping_path" value="$(arg mapping_path)"/>
      <arg name="robot_state_pub_frequency" value="$(arg robot_state_pub_frequency)"/>
      <arg name="joint_state_pub_frequency" value="$(arg joint_state_pub_frequency)"/>
      <arg name="initial_z" value="$(arg initial_z)"/>
    </include>
    <group unless="$(arg grasp_controller)">
      <node name="$(arg hand_id)_trajectory_controller" pkg="sr_utilities" type="trajectory_controller_spawner.py" output="screen">
        <param name="hand_trajectory" value ="$(arg hand_trajectory)"/>
        <param name="exclude_wrist" value="$(arg include_wrist_in_arm_controller)"/>
        <param name="wait_for" value ="calibrated"/>
      </node>
    </group>
  </group>

  <arg name="robot_ip" default="192.168.1.1"/>
  <arg name="kinematics_config" default="/home/user/my_robot_calibration.yaml"/>

  <param name="robot_description" command="xacro --inorder $(arg robot_description) initial_z:=$(arg initial_z)"/>


  <!-- disaled so that we can try and load it as a plugin instead -->
  <!--include file="$(find sr_robot_launch)/launch/ur10_new_ros_driver.launch">
       <arg name="robot_ip" value="$(arg robot_ip)"/>
       <arg name="kinematics_config" value="$(arg kinematics_config)"/>
  </include-->






<!--
  <node name="arm_trajectory_controller_spawner" pkg="controller_manager" type="spawner" output="screen" args="ra_trajectory_controller"/>
-->

  <arg name="controllers" default="ra_trajectory_controller joint_state_controller pos_traj_controller speed_scaling_state_controller force_torque_sensor_controller"/>
  <arg name="stopped_controllers" default="scaled_pos_traj_controller pos_traj_controller"/>


  <!-- spawn controller manager 
  <node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" args="$(arg controllers)" />
-->
  <!-- load other controller -->
  <node name="ros_control_stopped_spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" args="--stopped $(arg stopped_controllers)" />


  <node name="controller_stopper" pkg="controller_stopper" type="node" respawn="false" output="screen">
    <remap from="robot_running" to="ur_hardware_interface/robot_program_running"/>
    <rosparam param="consistent_controllers">
       - "joint_state_controller"
       - "force_torque_sensor_controller"
    </rosparam>
  </node>


  <rosparam>
    robot_hardware:
       - ur_hardware_interface
       - unique_robot_hw
  </rosparam>

  <!-- These will be loaded if arm and hand are enabled -->
  <!-- Trajectory mode -->
  <group if="$(arg arm_ctrl)">
    <rosparam command="load" file="$(arg arm_robot_hw)"/>
    <group if="$(arg arm_trajectory)">
      <group if="$(arg hand_ctrl)">
        <rosparam if="$(arg include_wrist_in_arm_controller)" command="load" file="$(find ur_robot_driver)/config/ur10_controllers.yaml"/>
      </group>
      <node if="$(arg hand_ctrl)" name="arm_trajectory_controller_spawner" pkg="controller_manager" type="spawner" output="screen"
            args="--wait-for=/$(arg arm_id)_arm_ready --wait-for=/calibrated $(arg arm_id)_trajectory_controller"/>
    </group>
  </group>




</launch>
