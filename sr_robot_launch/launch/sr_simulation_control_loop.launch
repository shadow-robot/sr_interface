<launch>
  <arg name="debug" default="false"/>
  <arg name="verbose" default="true"/>
  <arg name="robot_state_pub_frequency" default="250"/>
  <arg name="joint_state_pub_frequency" default="125"/>
  <!-- Set to false if you want to start without guis -->
  <arg name="gui" default="true"/>
  <!-- Whether to load a scene to restrain the movement of the robot -->
  <arg name="scene" default="false"/>
  <!-- Set world value dependant on scene -->
  <arg name="world" default="$(find sr_description_common)/worlds/shadowhand.world"/>

  <!-- ROBOT CONFIGS -->
  <arg name="side" default="right"/>
  <arg name="side_letter" value="$(eval side[0])"/>
  <arg name="arm" default="true"/>
  <arg name="hand" default="true"/>
  <!-- Set to true if you want the robot to start in the "home" positions -->
  <arg name="start_home" default="false"/>
  <!-- home_angles must be input at the launch -->
  <arg name="home_angles" default=""/>

  <!-- HAND SPECIFIC CONFIG-->
  <arg name="hand_id" value="$(arg side_letter)h"/>
  <!-- Whether to run hand controllers. -->
  <arg name="hand_ctrl" default="$(arg hand)"/>
  <!-- Set to hand_e or hand_g -->
  <arg name="hand_type" default="hand_e"/>
  <!-- Set to true to spawn trajectory controllers for the hands(the trajectory controller overwrites continuously the joint position command, preventing direct control via topics-->
  <arg name="hand_trajectory" default="true"/>
  <!-- Set to true if you want to use grasp controller -->
  <arg name="grasp_controller" default="false"/>
  <!-- Set to true if you want to use hybrid controller -->
  <arg name="hybrid_controller" default="false"/>

  <!-- Robot description related config-->
  <arg unless="$(arg arm)" name="robot_name" default="usrh"/>
  <arg unless="$(arg arm)" name="initial_z" default="0.0"/>

  <!-- ARM SPECIFIC CONFIG-->
  <arg name="arm_prefix" value="$(arg side_letter)a"/>
  <!-- Whether to run arm controllers. -->
  <arg name="arm_ctrl" default="$(arg arm)"/>
  <!-- Set to true to spawn trajectory controllers for the arms (the trajectory controller overwrites continuously the joint position command, preventing direct control via topics-->
  <arg name="arm_trajectory" default="$(arg arm)"/>
  <!-- Set to true to spawn group position controllers for the arms -->
  <arg name="arm_position" default="$(eval not arm_trajectory and arm)"/>

  <!-- Robot description related config-->
  <arg name="robot_model" default="ur10e"/>
  <arg name="arm_x_separation" default="0.0"/>
  <arg name="arm_y_separation" default="0.0"/>
  <arg if="$(arg arm)" name="robot_name" default="$(arg robot_model)srh"/>
  <arg if="$(arg arm)" name="initial_z" default="0.1"/>

  <!-- LOADING ROBOT DESCRIPTION-->
    <include file="$(find sr_robot_launch)/launch/load_robot_description.launch">
    <arg name="sim" default="true"/>
    <arg name="side" default="$(arg side)"/>
    <arg name="arm" default="$(arg arm)"/>
    <arg name="hand" value="$(arg hand)"/>
    <arg name="robot_model" value="$(arg robot_model)"/>
    <arg name="hand_type" value="$(arg hand_type)"/>
    <arg name="initial_z" value="$(arg initial_z)"/>
    <arg name="arm_x_separation" value="$(arg arm_x_separation)"/>
    <arg name="arm_y_separation" value="$(arg arm_y_separation)"/>
  </include>

  <!-- Robot config -->
  <arg if="$(eval arg('hand') and arg('arm') and not arg('hand_type') == 'hand_g')" name="robot_config_file" default="$(find sr_multi_moveit_config)/config/robot_configs/$(arg side)_sh_$(arg robot_model).yaml"/>
  <arg if="$(eval arg('hand') and arg('arm') and arg('hand_type') == 'hand_g')" name="robot_config_file" default="$(find sr_multi_moveit_config)/config/robot_configs/$(arg side)_sh_lite_$(arg robot_model).yaml"/>
  <arg if="$(eval arg('hand') and not arg('arm') and not arg('hand_type') == 'hand_g')" name="robot_config_file" default="$(find sr_multi_moveit_config)/config/robot_configs/$(arg side)_sh.yaml"/>
  <arg if="$(eval arg('hand') and not arg('arm') and arg('hand_type') == 'hand_g')" name="robot_config_file" default="$(find sr_multi_moveit_config)/config/robot_configs/$(arg side)_sh_light.yaml"/>
  <arg if="$(eval not arg('hand') and arg('arm'))" name="robot_config_file" default="$(find sr_multi_moveit_config)/config/robot_configs/$(arg side)_sh_$(arg robot_model).yaml"/>

  <!-- Set robot config file path in a param in case moveit nodes need it -->
  <param name="robot_config_file" value="$(arg robot_config_file)" type="str"/>

  <!-- RUNNING THE SIMULATION -->
  <!-- Mock hand data for simulation -->
  <param name="/hand/mapping/0" value="$(arg hand_id)"/>
  <param name="/hand/joint_prefix/0" value="$(arg hand_id)_"/>

  <param name="/use_sim_time" value="true"/>
  <env name="GAZEBO_MODEL_PATH" value="$(find sr_description_common)/models/" />
  <env name="GAZEBO_MODEL_DATABASE_URI" value="" />
  <env name="MESH_WORKSPACE_PATH" value="$(find sr_description_common)/models/" />
  <arg name="paused" value="$(arg start_home)"/>
  <arg if="$(arg start_home)" name="spawn_model_extra_args" value="-unpause $(arg home_angles)" />
  <arg unless="$(arg start_home)" name="spawn_model_extra_args" value="" />

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" default="$(arg world)"/>
    <arg name="gui" default="$(arg gui)"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="verbose" value="$(arg verbose)" />
  </include>

  <node name="spawn_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model $(arg robot_name) $(arg spawn_model_extra_args)" respawn="false" output="screen"/>

  <include file="$(find ros_ethercat_model)/launch/joint_state_publisher.launch" >
    <arg name="publish_rate" value="$(arg joint_state_pub_frequency)"/>
  </include>

  <!-- Robot state publisher -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="$(arg robot_state_pub_frequency)"/>
    <param name="tf_prefix" type="string" value="" />
  </node>

  <!-- Set scene for robot - restrains movement -->
  <group if="$(arg scene)">
    <include file="$(find gazebo2rviz)/launch/gazebo2moveit.launch">
      <arg name="frequency" default="1" />
      <arg if="$(arg arm)" name="ignore_robot_model" value="$(arg robot_name)"/>
    </include>
  </group>

  <!-- ARM SPECIFIC -->
  <group if="$(arg arm_trajectory)">
    <rosparam file="$(find sr_robot_launch)/config/gazebo/controller/$(arg arm_prefix)_trajectory_controller.yaml" command="load"/>
    <node name="arm_trajectory_controller_spawner" pkg="controller_manager" type="spawner" output="screen" args="$(arg arm_prefix)_trajectory_controller"/>
  </group>

  <group if="$(arg arm_position)">
    <rosparam file="$(find sr_robot_launch)/config/gazebo/controller/$(arg arm_prefix)_group_position_controller.yaml" command="load"/>
    <node name="arm_group_position_controller_spawner" pkg="controller_manager" type="spawner" output="screen" args="$(arg arm_prefix)_group_position_controller"/>
  </group>

  <!-- HAND SPECIFIC -->
  <group if="$(eval arg('hand_type') == 'hand_e')">
    <rosparam if="$(eval not grasp_controller and not hybrid_controller)" command="load" file="$(find sr_description)/hand/config/$(arg hand_id)_controller_gazebo.yaml"/>
    <rosparam if="$(arg grasp_controller)" command="load" file="$(find sr_description)/hand/config/$(arg hand_id)_grasp_controller_gazebo.yaml"/>
    <rosparam if="$(arg hybrid_controller)" command="load" file="$(find sr_description)/hand/config/$(arg hand_id)_hybrid_controller_gazebo.yaml"/>
  </group>

  <group if="$(eval arg('hand_type') == 'hand_g')">
    <rosparam unless="$(arg grasp_controller)" command="load" file="$(find sr_description)/hand/config/$(arg hand_id)_controller_gazebo.yaml"/>
    <rosparam if="$(arg grasp_controller)" command="load" file="$(find sr_description)/hand/config/$(arg hand_id)_lite_grasp_controller_gazebo.yaml"/>
  </group>

  <group if="$(arg hand_ctrl)">
    <arg if="$(arg grasp_controller)" name="hand_controller_group" default="grasp"/>
    <arg if="$(arg hybrid_controller)" name="hand_controller_group" default="hybrid"/>
    <arg if="$(eval hand_trajectory and not grasp_controller and not hybrid_controller)" name="hand_controller_group" default="trajectory"/>
    <arg if="$(eval not hand_trajectory and not grasp_controller and not hybrid_controller)" name="hand_controller_group" default="position"/>
    <node name="$(arg hand_id)_controller_spawner" pkg="sr_utilities" type="controller_spawner.py" output="screen">
      <param name="controller_group" value="$(arg hand_controller_group)"/>
    </node>
  </group>
</launch>
