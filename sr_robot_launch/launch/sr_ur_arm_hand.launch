<launch>
  <!-- This launch file is for one ur arm and a shadow hand -->

  <!-- set to false if you want to use real robots, true if you need the gazebo simulation -->
  <arg name="sim" default="true"/>
  <!-- Set to true for debugging -->
  <arg name="debug" default="false"/>
  <!-- Set to true to allow planning trajectories-->
  <arg name="use_moveit" default="true"/>
  <!--Choose planner library, options are ompl, stomp or sbpl-->
  <arg name="planning" default="ompl"/>
  <!--Should the planner yaml be automatically generated? -->
  <arg name="generate_planning_config" default="true"/>
  <!-- Set to false if you want to start without guis -->
  <arg name="gui" default="true"/>
  <arg name="verbose" default="true" />
  <!-- Set whether to load a scene to restrain the movement of the robot -->
  <arg name="scene" default="false"/>
  <!-- Set the scene file -->
  <arg name="scene_file" default="$(find sr_description_common)/scenes/demo_space_large_unimanual.scene"/>
  <!-- Set world value dependant on scene -->
  <arg name="world" default="$(find sr_description_common)/worlds/shadowhands_and_arms.world"/>
  <!-- Set to true if you want the robot to start in the "home" positions -->
  <arg name="start_home" default="false"/>
  <!-- home_angles must be input at the launch -->
  <arg if="$(arg start_home)" name="home_angles"/>
  <!-- Set this to true if you run the hardware loop on a remote computer -->
  <arg name="external_control_loop" default="false"/>
  <!-- The robot state publisher publishing frequency  -->
  <arg name="robot_state_pub_frequency" default="250"/>
  <!-- The joint state publisher publishing frequency  -->
  <arg name="joint_state_pub_frequency" default="125"/>

  <!-- ROBOT CONFIG-->
  <arg name="side" default="right"/>
  <arg name="side_letter" value="$(eval side[0])"/>
  <arg name="hand_id" value="$(arg side_letter)h"/>
  <arg name="arm_prefix" value="$(arg side_letter)a"/>

  <arg name="robot_model" default="ur10e"/>
  <arg name="robot_description" default="'$(find sr_multi_description)/urdf/$(arg side)_srhand_$(arg robot_model).urdf.xacro'"/>
  <arg name="robot_config_file" default="$(find sr_multi_moveit_config)/config/robot_configs/$(arg side)_sh_$(arg robot_model).yaml"/>
  <arg name="robot_name" default="$(arg robot_model)srh"/>

  <!-- HANDS CONFIG-->
  <arg name="hand_serial" default="634"/>
  <arg name="mapping_path" default="$(find sr_edc_launch)/mappings/default_mappings/$(arg hand_id)_E_v4.yaml"/>
  <!-- Allows to specify the ethernet interface/s to be used for ethercat devices. It defaults to the value of the env var ETHERCAT_PORT
       More than one interface can be specified by concatenating them using underscore as a separator (e.g eth1_eth2_eth3) -->
  <arg name="eth_port" default="$(optenv ETHERCAT_PORT eth0)"/>
  <!-- ik solver possible values sr_hand_kinematics/trac_ik/bio_ik -->
  <arg name="hand_ik_solver" default="sr_hand_kinematics"/>
  <!-- Set to true to spawn trajectory controllers for the hands(the trajectory controller overwrites continuously the joint position command, preventing direct control via topics-->
  <arg name="hand_trajectory" default="true"/>
  <!-- Set to true to spawn the position controllers for the hands-->
  <arg name="hand_ctrl" default="true"/>
  <!-- The control mode PWM (true) or torque (false) -->
  <!-- Set to true by default for now as torque control is not available yet -->
  <arg name="pwm_control" default="true"/>
  <!-- Set to true if you want to use grasp controller -->
  <arg name="grasp_controller" default="false"/>
  <!-- Set to true if you want to use hybrid controller -->
  <arg name="hybrid_controller" default="false"/>
  <!-- Set the hand type here: hand_e_plus, hand_e, hand_lite, hand_extra_lite -->
  <arg name="hand_type" default="hand_e_plus"/>

  <!-- ARMS CONFIG-->
  <arg name="initial_z" default="0.1"/>
  <arg name="arm_x_separation" default="0.0"/>
  <arg name="arm_y_separation" default="0.0"/>
  <arg name="arm_robot_hw" if="$(eval not arg('robot_model') == 'ur10e')" default="$(find sr_robot_launch)/config/$(arg side)_ur_arm_robot_hw.yaml"/>
  <arg name="arm_robot_hw" if="$(eval arg('robot_model') == 'ur10e')" default="$(find sr_robot_launch)/config/$(arg side)_ur10e_arm_robot_hw.yaml"/>

  <!-- Set to true to spawn trajectory controllers for the arms (the trajectory controller overwrites continuously the joint position command, preventing direct control via topics-->
  <arg name="arm_trajectory" default="true"/>
  <!-- Set to true to spawn group position controllers for the arms -->
  <arg name="arm_position" default="$(eval not arm_trajectory)"/>
  <!-- Set to true to spawn the position controllers for the arm-->
  <arg name="arm_ctrl" default="true"/>
  <arg name="arm_speed_scale" default="0.5"/>
  <!-- Sets up right payload -->
  <arg if="$(eval arg('hand_type') == 'hand_e')" name="arm_payload_mass" default="5.0"/>
  <arg if="$(eval arg('hand_type') == 'hand_e_plus')" name="arm_payload_mass" default="5.0"/>
  <arg if="$(eval arg('hand_type') == 'hand_lite')" name="arm_payload_mass" default="2.7"/>
  <arg if="$(eval arg('hand_type') == 'hand_extra_lite')" name="arm_payload_mass" default="2.5"/>
  <arg name="arm_payload_cog" default="[0.0, 0.0, 0.12]"/>

  <arg if="$(eval not hand_trajectory and not arm_trajectory)" name="trajectory_controllers_list" default="[]"/>
  <arg if="$(eval hand_trajectory and arm_trajectory)" name="trajectory_controllers_list" 
       default="[/$(arg arm_prefix)_trajectory_controller/state, /$(arg hand_id)_trajectory_controller/state]"/>
  <arg if="$(eval hand_trajectory and not arm_trajectory)" name="trajectory_controllers_list"
       default="[/$(arg hand_id)_trajectory_controller/state]"/>

  <!-- SIMULATED ROBOTS -->
  <group if="$(arg sim)">
    <env name="GAZEBO_MODEL_PATH" value="$(find sr_description_common)/models/" />
    <env name="GAZEBO_MODEL_DATABASE_URI" value="" />
    <env name="MESH_WORKSPACE_PATH" value="$(find sr_description_common)/models/" />
    <arg name="paused" value="$(arg start_home)"/>
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="world_name" default="$(arg world)"/>
      <arg name="gui" default="$(arg gui)"/>
      <arg name="paused" value="$(arg paused)"/>
      <arg name="debug" value="$(arg debug)"/>
      <arg name="verbose" value="$(arg verbose)" />
    </include>
    <param name="robot_description" command="xacro $(arg robot_description) initial_z:=$(arg initial_z) arm_x_separation:=$(arg arm_x_separation) arm_y_separation:=$(arg arm_y_separation)"/>
    <!-- HAND -->
    <param name="/hand/mapping/$(arg hand_serial)" value="$(arg hand_id)"/>
    <param name="/hand/joint_prefix/$(arg hand_serial)" value="$(arg hand_id)_"/>
    <arg if="$(arg start_home)" name="spawn_model_extra_args" value="-unpause $(arg home_angles)" />
    <arg unless="$(arg start_home)" name="spawn_model_extra_args" value="" />
    <node name="spawn_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model $(arg robot_name) $(arg spawn_model_extra_args)" respawn="false" output="screen"/>
    <rosparam if="$(eval not grasp_controller and not hybrid_controller)" command="load" file="$(find sr_description)/hand/config/$(arg hand_id)_controller_gazebo.yaml"/>
    <rosparam if="$(arg grasp_controller)" command="load" file="$(find sr_description)/hand/config/$(arg hand_id)_grasp_controller_gazebo.yaml"/>
    <rosparam if="$(arg hybrid_controller)" command="load" file="$(find sr_description)/hand/config/$(arg hand_id)_hybrid_controller_gazebo.yaml"/>
    <include file="$(find ros_ethercat_model)/launch/joint_state_publisher.launch" >
      <arg name="publish_rate" value="$(arg joint_state_pub_frequency)"/>
    </include>
    <!-- ARM -->
    <group if="$(arg arm_trajectory)">
      <rosparam file="$(find sr_robot_launch)/config/gazebo/controller/$(arg arm_prefix)_trajectory_controller.yaml" command="load"/>
      <node name="arm_trajectory_controller_spawner" pkg="controller_manager" type="spawner" output="screen" args="$(arg arm_prefix)_trajectory_controller"/>
    </group>
    <group if="$(arg arm_position)">
      <rosparam file="$(find sr_robot_launch)/config/gazebo/controller/$(arg arm_prefix)_group_position_controller.yaml" command="load"/>
      <node name="arm_group_position_controller_spawner" pkg="controller_manager" type="spawner" output="screen" args="$(arg arm_prefix)_group_position_controller"/>
    </group>
    <!-- Robot state publisher -->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
      <param name="publish_frequency" type="double" value="$(arg robot_state_pub_frequency)"/>
      <param name="tf_prefix" type="string" value="" />
    </node>
    <!-- Set scene for robot - restrains movement -->
    <group if="$(arg scene)">
      <include file="$(find gazebo2rviz)/launch/gazebo2moveit.launch">
        <arg name="frequency" default="1" />
      </include>
    </group>
    <group if="$(arg hand_ctrl)">
      <arg if="$(arg grasp_controller)" name="hand_controller_group" default="grasp"/>
      <arg if="$(arg hybrid_controller)" name="hand_controller_group" default="hybrid"/>
      <arg if="$(eval hand_trajectory and not grasp_controller and not hybrid_controller)" name="hand_controller_group" default="trajectory"/>
      <arg if="$(eval not hand_trajectory and not grasp_controller and not hybrid_controller)" name="hand_controller_group" default="position"/>
      <node name="$(arg hand_id)_controller_spawner" pkg="sr_utilities" type="controller_spawner.py" output="screen">
        <param name="controller_group" value="$(arg hand_controller_group)"/>
      </node>
    </group>
  </group>

  <!-- REAL ROBOTS -->
  <group unless="$(arg sim)">
    <group unless="$(arg external_control_loop)">
      <include file="$(find sr_robot_launch)/launch/sr_hardware_control_loop.launch">
        <arg name="debug" value="$(arg debug)"/>
        <arg name="initial_z" value="$(arg initial_z)"/>
        <arg name="robot_description" value="$(arg robot_description)"/>
        <arg name="arm_x_separation" value="$(arg arm_x_separation)"/>
        <arg name="arm_y_separation" value="$(arg arm_y_separation)"/>
        <arg name="side" value="$(arg side)"/>
        <arg name="robot_model" value="$(arg robot_model)"/>
        <arg name="arm_robot_hw" value="$(arg arm_robot_hw)"/>
        <arg name="arm_speed_scale" value="$(arg arm_speed_scale)"/>
        <arg name="arm_payload_mass" value="$(arg arm_payload_mass)"/>
        <arg name="arm_payload_cog" value="$(arg arm_payload_cog)"/>
        <arg name="hand_serial" value="$(arg hand_serial)"/>
        <arg name="mapping_path" value="$(arg mapping_path)"/>
        <arg name="eth_port" value="$(arg eth_port)"/>
        <arg name="grasp_controller" value="$(arg grasp_controller)"/>
        <arg name="hybrid_controller" value="$(arg hybrid_controller)"/>
        <arg name="pwm_control" value="$(arg pwm_control)"/>
        <arg name="hand_ctrl" value="$(arg hand_ctrl)"/>
        <arg name="arm_trajectory" value="$(arg arm_trajectory)"/>
        <arg name="arm_position" value="$(arg arm_position)"/>
        <arg name="hand_trajectory" value="$(arg hand_trajectory)"/>
        <arg name="arm_ctrl" value="$(arg arm_ctrl)"/>
        <arg name="robot_state_pub_frequency" value="$(arg robot_state_pub_frequency)"/>
        <arg name="joint_state_pub_frequency" value="$(arg joint_state_pub_frequency)"/>
      </include>
    </group>
    <!-- Set scene for robot after delay to start after moveit - restrains movement -->
    <group if="$(arg scene)">
      <node name="conditional_delayed_rostool_unimanual_scene" pkg="sr_utilities_common" type="conditional_delayed_rostool.py" output="screen">
        <param name="package_name" value="sr_multi_moveit_config" />
        <param name="executable_name" value="scene.launch" />
        <rosparam param="params_list">[/robot_description, /robot_description_semantic]</rosparam>
        <rosparam param="topics_list">[/planning_scene]</rosparam>
        <param name="launch_args_list" value="scene_file:=$(arg scene_file)" />
      </node>
    </group>
  </group>

  <!-- MOVEIT -->
  <group if="$(arg use_moveit)">
    <rosparam file="$(arg robot_config_file)"/>
    <include file="$(find sr_multi_moveit_config)/launch/moveit_planning_and_execution.launch">
      <arg name="hand_ik_solver" value="$(arg hand_ik_solver)"/>
      <arg name="load_robot_description" value="true"/>
      <arg name="gui" value="$(arg gui)"/>
      <arg name="robot_config_file" value ="$(arg robot_config_file)"/>
      <arg name="planning" value="$(arg planning)"/>
      <arg name="generate_planning_config" value="$(arg generate_planning_config)"/>
      <arg name="trajectory_controllers_list" value="$(arg trajectory_controllers_list)"/>
    </include>
    <include file="$(find sr_multi_moveit_config)/launch/default_warehouse_db.launch"/>
  </group>

</launch>
