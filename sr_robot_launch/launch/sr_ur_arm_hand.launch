<launch>
  <!-- This launch file is for a combination of ur arms and shadow hands -->

  <!-- set to false if you want to use real robots, true if you need the gazebo simulation -->
  <arg name="sim" default="true"/>
  <!-- Set to true for debugging -->
  <arg name="debug" default="false"/>
  <!-- Set to true to allow planning trajectories-->
  <arg name="use_moveit" default="true"/>
  <!--Choose planner library, options are ompl, stomp or sbpl-->
  <arg name="planning" default="ompl"/>
  <!--Should the planner yaml be automatically generated? -->
  <arg name="generate_planning_config" default="True"/>  
  <!-- Set to false if you want to start without guis -->
  <arg name="gui" default="true"/>
  <arg name="world" default="$(find sr_description)/other/worlds/shadowhand.world"/>

  <!-- Change this for the left hand and arm -->
  <arg name="hand_id" default="rh"/>
  <arg name="arm_id" default="ra"/>
  <arg name="side" default="right"/>
  <arg name="robot_model" default="ur10"/>
  <arg name="initial_z" default="0.1"/>

  <!-- Change this for another hand -->
  <arg name="robot_description" default="'$(find sr_multi_description)/urdf/$(arg side)_srhand_$(arg robot_model)_joint_limited.urdf.xacro'"/>
  <arg name="robot_config_file" default="$(find sr_multi_moveit_config)/config/robot_configs/$(arg side)_sh_$(arg robot_model).yaml"/>
  <arg name="robot_name" default="$(arg robot_model)srh"/>

  <!-- ARM -->
  <arg name="arm_controller" default="$(find sr_robot_launch)/config/$(arg side)_ur_arm_controller.yaml"/>
  <arg name="arm_group_name" default="$(arg side)_arm"/>
  <!-- Set to true to spawn trajectory controllers for the arms (the trajectory controller overwrites continuously the joint position command, preventing direct control via topics-->
  <arg name="arm_trajectory" default="true"/>
  <!-- Set to true to spawn the position controllers for the arm-->
  <arg name="arm_ctrl" default="true"/>

  <!-- HAND -->
  <!-- Set to true to spawn trajectory controllers for the hands(the trajectory controller overwrites continuously the joint position command, preventing direct control via topics-->
  <arg name="hand_trajectory" default="true"/>
  <!-- Set to true to spawn the position controllers for the hands-->
  <arg name="hand_ctrl" default="true"/>
  <!-- The control mode PWM (true) or torque (false) -->
  <arg name="pwm_control" default="true"/>
  <!-- Serial number of the hand to be used-->
  <arg name="hand_serial" default="1082"/>
  <!-- the path to the mapping files -->
  <arg name="mapping_path" default="$(find sr_edc_launch)/mappings/default_mappings/$(arg hand_id)_E_v3.yaml"/>

  <!-- Allows to specify the ethernet interface/s to be used for ethercat devices. It defaults to the value of the env var ETHERCAT_PORT
       More than one interface can be specified by concatenating them using underscore as a separator (e.g eth1_eth2_eth3) -->
  <arg name="eth_port" default="$(optenv ETHERCAT_PORT eth0)"/>

  <!-- SIMULATED ROBOTS -->
  <group if="$(arg sim)">
    <arg name="paused" value="false"/>
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="world_name" default="$(arg world)"/>
      <arg name="gui" default="$(arg gui)"/>
      <arg name="paused" value="$(arg paused)"/>
      <arg name="debug" value="$(arg debug)"/>
    </include>
    <param name="robot_description" command="$(find xacro)/xacro.py $(arg robot_description) initial_z:=$(arg initial_z)"/>
    <!-- HAND -->
    <param name="/hand/mapping/$(arg hand_serial)" value="$(arg hand_id)"/>
    <param name="/hand/joint_prefix/$(arg hand_serial)" value="$(arg hand_id)_"/>
    <node name="spawn_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model $(arg robot_name)" respawn="false" output="screen"/>
    <rosparam command="load" file="$(find sr_description)/hand/config/$(arg hand_id)_controller_gazebo.yaml"/>
    <include file="$(find ros_ethercat_model)/launch/joint_state_publisher.launch" />
    <!-- ARM -->
    <rosparam file="$(find sr_robot_launch)/config/gazebo/controller/$(arg arm_id)_trajectory_controller.yaml" command="load"/>
    <group if="$(arg arm_trajectory)">
      <node name="arm_trajectory_controller_spawner" pkg="controller_manager" type="spawner" output="screen" args="--shutdown-timeout=1.0 $(arg arm_id)_trajectory_controller"/>
    </group>
    <!-- Robot state publisher -->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
      <param name="publish_frequency" type="double" value="50.0" />
      <param name="tf_prefix" type="string" value="" />
    </node>
  </group>

  <!-- REAL ROBOTS -->
  <group unless="$(arg sim)">
    <!-- HAND -->
    <include file="$(find sr_edc_launch)/sr_edc.launch">
      <arg name="debug" value="$(arg debug)"/>
      <arg name="eth_port" value="$(arg eth_port)"/>
      <arg name="robot_description" value="$(arg robot_description)"/>
      <arg name="pwm_control" value="$(arg pwm_control)"/>
      <arg name="hand_serial" value="$(arg hand_serial)"/>
      <arg name="hand_id" value="$(arg hand_id)"/>
      <arg name="mapping_path" value="$(arg mapping_path)"/>
      <arg name="initial_z" value="$(arg initial_z)"/>
    </include>
    <!-- ARM -->
    <rosparam command="load" file="$(arg arm_controller)"/>
    <rosparam command="load" file="$(find sr_robot_launch)/config/$(arg arm_id)_trajectory_controller.yaml"/>
    <!-- real time control loop -->
    <group if="$(arg arm_ctrl)">
      <param name="$(arg arm_id)_sr_ur_controller/robot_program_path" type="str" value="$(find sr_ur_bringup)/robot_programs/"/>
      <node name="arm_controller_spawner" pkg="controller_manager" type="spawner" output="screen" args="--shutdown-timeout=1.0 $(arg arm_id)_sr_ur_controller"/>
    </group>
    <!-- Should only be used when testing arm alone, as hand launch includes joint state publisher -->
    <!-- <include file="$(find ros_ethercat_model)/launch/joint_state_publisher.launch"/> -->
    <group if="$(arg arm_trajectory)">
      <node name="arm_checker" pkg="sr_robot_launch" type="check_arms_ready" output="screen">
        <rosparam param="controllers" subst_value="True"> ["$(arg arm_id)_sr_ur_controller"] </rosparam>
      </node>
      <node name="arm_trajectory_controller_spawner" pkg="controller_manager" type="spawner" output="screen"
            args="--wait-for=/arms_ready --shutdown-timeout=1.0 $(arg arm_id)_trajectory_controller"/>
    </group>
  </group>

  <!-- MOVEIT -->
  <group if="$(arg use_moveit)">
    <include file="$(find sr_multi_moveit_config)/launch/moveit_planning_and_execution.launch">
      <arg name="load_robot_description" value="false"/>
      <arg name="gui" default="$(arg gui)"/>
      <arg name="robot_config_file" value ="$(arg robot_config_file)"/>
      <arg name="planning" value="$(arg planning)"/>
      <arg name="generate_planning_config" value="$(arg generate_planning_config)"/>
    </include>
    <include file="$(find sr_multi_moveit_config)/launch/default_warehouse_db.launch"/>

    <node pkg="sr_multi_moveit_config" type="timed_roslaunch.sh" args="10 sr_robot_launch trajectory_services.launch
      arm_group_name:=$(arg arm_group_name)" name="timed_trajectory_services" output="screen"
    />

  </group>

  <!-- Trajectory controller -->
  <group if="$(arg hand_ctrl)">
    <node name="$(arg hand_id)_trajectory_controller" pkg="sr_utilities" type="trajectory_controller_spawner.py" output="screen">
      <param name="hand_trajectory" value ="$(arg hand_trajectory)"/>
      <param name="exclude_wrist" value="true"/>
      <param name="wait_for" value ="/calibrated" unless="$(arg sim)"/>
    </node>
  </group>
</launch>
