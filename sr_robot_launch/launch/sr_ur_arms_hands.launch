<launch>
  <!-- This launch file is for a bimanual system of ur arms and shadow hands -->

  <!-- set to false if you want to use real robots, true if you need the gazebo simulation -->
  <arg name="sim" default="false"/>
  <!-- Set to true for debugging -->
  <arg name="debug" default="false"/>
  <!-- Set to true to allow planning trajectories-->
  <arg name="use_moveit" default="true"/>
  <!--Choose planner library, options are ompl, stomp or sbpl-->
  <arg name="planning" default="ompl"/>
  <!--Should the planner yaml be automatically generated? -->
  <arg name="generate_planning_config" default="true"/>
  <!-- Set to false if you want to start without guis -->
  <arg name="gui" default="true"/>
  <arg name="verbose" default="true" />
  <!-- Set whether to load a scene to restrain the movement of the robot -->
  <arg name="scene" default="false"/>
  <!-- Set this to true if you run the hardware loop on a remote computer -->
  <arg name="external_control_loop" default="false"/>
  <!-- The robot state publisher publishing frequency  -->
  <arg name="robot_state_pub_frequency" default="250"/>
  <!-- The joint state publisher publishing frequency  -->
  <arg name="joint_state_pub_frequency" default="125"/>

  <!-- ROBOT CONFIG-->
  <!-- Specify if the system has "both" hands, only "right", only "left" or "none" hands-->
  <arg name="hands" default="both"/>
  <arg name="robot_model" default="ur10e"/>
  <arg name="robot_name" default="$(arg robot_model)srh"/>

  <!-- HANDS SPECIFIC CONFIG-->
  <!-- ik solver possible values sr_hand_kinematics/trac_ik/bio_ik -->
  <arg name="hand_ik_solver" default="sr_hand_kinematics"/>
  <!-- Set to true to spawn trajectory controllers for the hands(the trajectory controller overwrites continuously the joint position command, preventing direct control via topics-->
  <arg name="hand_trajectory" default="true"/>
  <!-- Set to true to spawn the position controllers for the hands-->
  <arg name="hand_ctrl" unless="$(eval hands == 'none')" default="true"/>
  <arg name="hand_ctrl" if="$(eval hands == 'none')" value="false"/>
  <!-- The control mode PWM (true) or torque (false) -->
  <!-- Set to true by default for now as torque control is not available yet -->
  <arg name="pwm_control" default="true"/>
  <!-- Set to true if you want to use hybrid controller -->
  <arg name="hybrid_controller" default="false"/>

  <!-- ARMS SPECIFIC CONFIG-->
  <arg name="arm_1_z" default="0.0"/>
  <arg name="arm_2_z" default="0.0"/>
  <arg name="arm_x_separation" default="1.0"/>
  <arg name="arm_y_separation" default="1.0"/>
  <!-- Set to true to spawn trajectory controllers for the arms (the trajectory controller overwrites continuously the joint position command, preventing direct control via topics-->
  <arg name="arm_trajectory" default="true"/>
  <!-- Set to true to spawn group position controllers for the arms -->
  <arg name="arm_position" default="$(eval not arm_trajectory)"/>
  <!-- Set to true to spawn the position controllers for the arm-->
  <arg name="arm_ctrl" default="true"/>
  <arg name="right_arm_speed_scale" default="0.5"/>
  <arg name="left_arm_speed_scale" default="0.5"/>

  <!-- OTHER CONFIGS-->
  <!-- Trajectory controllers list for moveit-->
  <arg if="$(eval hand_ctrl and arm_trajectory)" name="trajectory_controllers_list" 
       default="[/ra_trajectory_controller/state, /la_trajectory_controller/state, /rh_trajectory_controller/state, /lh_trajectory_controller/state]"/>
  <arg if="$(eval not hand_ctrl and not arm_trajectory)" name="trajectory_controllers_list" value="[]"/>
  <arg if="$(eval hand_ctrl and not arm_trajectory)" name="trajectory_controllers_list"
       value="[/rh_trajectory_controller/state, /lh_trajectory_controller/state]"/>
  <arg if="$(eval not hand_ctrl and arm_trajectory)" name="trajectory_controllers_list"
       value="[/ra_trajectory_controller/state, /la_trajectory_controller/state]"/>

  <!-- SIMULATED ROBOTS -->
  <!-- Set world value -->
  <arg name="world" default="$(find sr_description_common)/worlds/shadowhands_and_arms.world" />
  <!-- Set to true if you want the robot to start in the "home" positions -->
  <arg name="start_home" default="false"/>
  <!-- home_angles must be input at the launch -->
  <arg name="home_angles" default=""/>

  <arg name="right_hand_type" default="hand_e"/>
  <arg name="right_hand_version" default="E3M5"/>
  <arg name="right_fingers" default="all"/>
  <arg name="right_tip_sensors" default="pst"/>
  <arg name="right_mid_sensors" default="none"/>
  <arg name="right_prox_sensors" default="none"/>
  <arg name="right_palm_sensor" default="none"/>

  <arg name="left_hand_type" default="hand_e"/>
  <arg name="left_hand_version" default="E3M5"/>
  <arg name="left_fingers" default="all"/>
  <arg name="left_tip_sensors" default="pst"/>
  <arg name="left_mid_sensors" default="none"/>
  <arg name="left_prox_sensors" default="none"/>
  <arg name="left_palm_sensor" default="none"/>

  <group if="$(arg sim)">
      <include file="$(find sr_robot_launch)/launch/sr_bimanual_simulation_control_loop.launch">
        <arg name="debug" value="$(arg debug)"/>
        <arg name="robot_name" value="$(arg robot_name)"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="world" value="$(arg world)"/>
        <arg name="scene" value="$(arg scene)"/>
        <arg name="verbose" value="$(arg verbose)" />
        <arg name="robot_state_pub_frequency" value="$(arg robot_state_pub_frequency)"/>
        <arg name="joint_state_pub_frequency" value="$(arg joint_state_pub_frequency)"/>
        <arg name="arm_x_separation" value="$(arg arm_x_separation)"/>
        <arg name="arm_y_separation" value="$(arg arm_y_separation)"/>
        <arg name="arm_1_z" value="$(arg arm_1_z)"/>
        <arg name="arm_2_z" value="$(arg arm_2_z)"/>
        <arg name="hands" value="both"/>
        <arg name="arms" value="true"/>
        <arg name="robot_model" value="$(arg robot_model)"/>
        <arg name="arm_ctrl" value="$(arg arm_ctrl)"/>
        <arg name="hand_ctrl" value="$(arg hand_ctrl)"/>
        <arg name="hand_trajectory" value="$(arg hand_trajectory)"/>
        <arg name="start_home" value="$(arg start_home)"/>
        <arg name="home_angles" value="$(arg home_angles)"/>
        <arg name="arm_trajectory" value="$(arg arm_trajectory)"/>
        <arg name="arm_position" value="$(arg arm_position)"/>
        <arg name="hybrid_controller" value="$(arg hybrid_controller)"/>
        <arg name="right_hand_type" value="$(arg right_hand_type)"/>
        <arg name="right_hand_version" value="$(arg right_hand_version)"/>
        <arg name="right_fingers" value="$(arg right_fingers)"/>
        <arg name="right_tip_sensors" value="$(arg right_tip_sensors)"/>
        <arg name="right_mid_sensors" value="$(arg right_mid_sensors)"/>
        <arg name="right_prox_sensors" value="$(arg right_prox_sensors)"/>
        <arg name="right_palm_sensor" value="$(arg right_palm_sensor)"/>
        <arg name="left_hand_type" value="$(arg left_hand_type)"/>
        <arg name="left_hand_version" value="$(arg left_hand_version)"/>
        <arg name="left_fingers" value="$(arg left_fingers)"/>
        <arg name="left_tip_sensors" value="$(arg left_tip_sensors)"/>
        <arg name="left_mid_sensors" value="$(arg left_mid_sensors)"/>
        <arg name="left_prox_sensors" value="$(arg left_prox_sensors)"/>
        <arg name="left_palm_sensor" value="$(arg left_palm_sensor)"/>
      </include>
  </group>

  <!-- REAL ROBOTS -->
  <!-- Set the scene file -->
  <arg name="scene_file" default="$(find sr_description_common)/scenes/demo_space_large_bimanual.scene"/>

  <group unless="$(arg sim)">
    <group unless="$(arg external_control_loop)">
      <!--Using this wrapper is temporary! Rosrun directy the sr_hand_autodetect when it's available after 09/2021 debian sync -->
      <node pkg="sr_utilities_common" type="ros_executable_wrapper.sh" name="bimanual_hardware_control_loop_autodetection" output="screen"
        args="sr_hand_autodetect roslaunch sr_robot_launch sr_bimanual_hardware_control_loop.launch
          debug:=$(arg debug)
          robot_state_pub_frequency:=$(arg robot_state_pub_frequency)
          joint_state_pub_frequency:=$(arg joint_state_pub_frequency)
          hands:=$(arg hands)
          pwm_control:=$(arg pwm_control)
          hand_trajectory:=$(arg hand_trajectory)
          arm_1_z:=$(arg arm_1_z)
          arm_2_z:=$(arg arm_2_z)
          arm_x_separation:=$(arg arm_x_separation)
          arm_y_separation:=$(arg arm_y_separation)
          arm_trajectory:=$(arg arm_trajectory)
          arm_position:=$(arg arm_position)
          right_arm_speed_scale:=$(arg right_arm_speed_scale)
          left_arm_speed_scale:=$(arg left_arm_speed_scale)" />
    </group>

    <!-- Set scene for robot after delay to start after moveit - restrains movement -->
    <group if="$(arg scene)">
      <node name="conditional_delayed_rostool_bimanual_scene" pkg="sr_utilities_common" type="conditional_delayed_rostool.py" output="screen">
        <param name="package_name" value="sr_multi_moveit_config" />
        <param name="executable_name" value="scene.launch" />
        <rosparam param="params_list">[/robot_description, /robot_description_semantic]</rosparam>
        <rosparam param="topics_list">[/planning_scene, /rviz_*]</rosparam>
        <param name="launch_args_list" value="scene_file:=$(arg scene_file)" />
      </node>
    </group>
  </group>

  <!-- MOVEIT -->
  <group if="$(arg use_moveit)">
      <include file="$(find sr_multi_moveit_config)/launch/moveit_planning_and_execution.launch">
        <arg name="hand_ik_solver" value="$(arg hand_ik_solver)"/>
        <arg name="load_robot_description" value="true"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="planning" value="$(arg planning)"/>
        <arg name="generate_planning_config" value="$(arg generate_planning_config)"/>
        <arg name="trajectory_controllers_list" value="$(arg trajectory_controllers_list)"/>
      </include>
      <include file="$(find sr_multi_moveit_config)/launch/default_warehouse_db.launch"/>
  </group>

  <!-- Publish underactuation error -->
  <node name="error_reporter" pkg="sr_error_reporter" type="error_reporter" output="screen"/>

</launch>
