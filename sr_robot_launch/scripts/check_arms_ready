#! /usr/bin/env python

import rospy
from controller_manager_msgs.srv import ListControllers
from std_msgs.msg import Bool


class ArmChecker(object):

    """
    Checks that the arm controllers have been loaded, then waits for a safe time before signaling that the arms
    are ready.

    We will use this signal to load the arm trajectory controllers
    """

    def __init__(self):
        self.controllers = rospy.get_param("~controllers", [])
        self.arms_ready = False
        self.pub = rospy.Publisher('arms_ready', Bool, queue_size=1)
        # Time between checks
        self.loop_time = 2.0
        # Time after the controllers are running before we signal that the arms are ready for the trajectory controllers (i.e. we assume they've received
        # valid status
        self.safety_time = 4.0

    def check_controllers_running(self, controllers):
        success = True
        list_controllers = rospy.ServiceProxy(
            'controller_manager/list_controllers', ListControllers)
        try:
            resp = list_controllers()
        except rospy.ServiceException:
            success = False

        if success:
            arm_controllers_running = [
                c.name for c in resp.controller if c.state == "running" and c.name in controllers]
            if len(arm_controllers_running) == len(controllers):
                return True
        return False

    def run(self):
        while not rospy.is_shutdown():
            if self.arms_ready:
                self.pub.publish(True)
            else:
                self.arms_ready = True
                rospy.sleep(self.safety_time)
            rospy.sleep(self.loop_time)


if __name__ == "__main__":
    rospy.init_node("check_arms_ready", anonymous=True)

    checker = ArmChecker()
    checker.run()
