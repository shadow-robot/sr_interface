#!/usr/bin/python
# Copyright 2020 Shadow Robot Company Ltd.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation version 2 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <http://www.gnu.org/licenses/>.

import rospy
from std_msgs.msg import Bool
from ur_dashboard_msgs.srv import GetSafetyMode, GetProgramState, GetRobotMode, Load
from ur_dashboard_msgs.msg import SafetyMode, ProgramState, RobotMode
from std_srvs.srv import Trigger


class SrUrUnlock():
    def __init__(self):
        self._external_control_program_name = rospy.get_param("~urcap_program_name", "external_ctrl.urp")
        self._arms = []
        if rospy.has_param('ra_sr_ur_robot_hw'):
            self._arms.append('ra')
        if rospy.has_param('la_sr_ur_robot_hw'):
            self._arms.append('la')
        if 0 == len(self._arms):
            rospy.logerr("No arms detected, shutting down %s", rospy.get_name())
            rospy.signal_shutdown("No arms detected")
        rospy.Subscriber("/sr_arm/release", Bool, self.unlock_subscriber)

    def unlock_subscriber(self, message):
        if message.data:
            self.release_arm()

    def call_arm_service(self, side, service_name, service_type, dashboard=True, service_data=""):
        if dashboard:
            service_string = "/" + side + "_sr_ur_robot_hw/dashboard/" + service_name
        else:
            service_string = "/" + side + "_sr_ur_robot_hw/" + service_name
        try:
            service_call = rospy.ServiceProxy(service_string, service_type)
            if "" == service_data:
                response = service_call()
            else:
                response = service_call(service_data)
            return response
        except rospy.ServiceException, e:
            rospy.logerr("Service call to '%s' failed for arm %s. %s", service_name, side, e)
            raise

    def startup_arms(self):
        for arm in self._arms:
            self.call_arm_service(arm, "power_on", Trigger)
        rospy.sleep(5)
        for arm in self._arms:
            self.call_arm_service(arm, "brake_release", Trigger)
        rospy.sleep(5)

    def check_arms_e_stops(self):
        for arm in self._arms:
            safety_mode = self.call_arm_service(arm, "get_safety_mode", GetSafetyMode)
            if SafetyMode.ROBOT_EMERGENCY_STOP == safety_mode.safety_mode.mode:
                while SafetyMode.ROBOT_EMERGENCY_STOP == safety_mode.safety_mode.mode:
                    rospy.logwarn("Emergency stop button is still pressed for arm %s, please release", arm)
                    safety_mode = self.call_arm_service(arm, "get_safety_mode", GetSafetyMode)
                    rospy.sleep(2)

    def unlock_arms_if_protective_stop(self):
        for arm in self._arms:
            safety_mode = self.call_arm_service(arm, "get_safety_mode", GetSafetyMode)
            if SafetyMode.PROTECTIVE_STOP == safety_mode.safety_mode.mode:
                rospy.loginfo("Protective stop detected on: %s. Unlocking...", arm)
                self.call_arm_service(arm, "unlock_protective_stop", Trigger)

    def unlock_arms_if_fault(self):
        fault = False
        for arm in self._arms:
            safety_mode = self.call_arm_service(arm, "get_safety_mode", GetSafetyMode)
            if SafetyMode.FAULT == safety_mode.safety_mode.mode or SafetyMode.VIOLATION == safety_mode.safety_mode.mode:
                fault = True
                if SafetyMode.FAULT == safety_mode.safety_mode.mode:
                    rospy.loginfo("Fault detected on: %s. This can be caused by using the external e-stop.\
                                   Have you released it?", arm)
                self.call_arm_service(arm, "restart_safety", Trigger)
        return fault

    def check_arms_robot_mode(self):
        arm_needs_starting = False
        for arm in self._arms:
            robot_mode = self.call_arm_service(arm, "get_robot_mode", GetRobotMode)
            if RobotMode.IDLE == robot_mode.robot_mode.mode or RobotMode.POWER_OFF == robot_mode.robot_mode.mode:
                rospy.loginfo("Starting arm: %s", arm)
                arm_needs_starting = True
        return arm_needs_starting

    def clear_arms_popups(self):
        for arm in self._arms:
            self.call_arm_service(arm, "close_safety_popup", Trigger)
        rospy.sleep(2)
        for arm in self._arms:
            self.call_arm_service(arm, "close_popup", Trigger)
        rospy.sleep(2)

    def load_arms_program_if_unloaded(self):
        sleep_time = False
        for arm in self._arms:
            if not rospy.get_param("/" + arm + "_sr_ur_robot_hw/headless_mode"):
                play_msg = self.call_arm_service(arm, "program_state", GetProgramState)
                if "null" == play_msg.program_name:
                    rospy.loginfo("Not in headless mode. Loading program: %s for arm: %s",
                                  self._external_control_program_name, arm)
                    resp = self.call_arm_service(arm, "load_program", Load,
                                                 service_data=self._external_control_program_name)
                    rospy.loginfo("%s", resp)
                    sleep_time = True
        return sleep_time

    def start_arms_program_if_stopped(self):
        sleep_time = False
        for arm in self._arms:
            if not rospy.get_param("/" + arm + "_sr_ur_robot_hw/headless_mode"):
                play_msg = self.call_arm_service(arm, "program_state", GetProgramState)
                if ProgramState.STOPPED == play_msg.state.state or ProgramState.PAUSED == play_msg.state.state:
                    rospy.loginfo("Not in headless mode. Starting program: %s for arm: %s", play_msg.program_name, arm)
                    self.call_arm_service(arm, "play", Trigger)
                    sleep_time = True
            else:
                rospy.loginfo("Headless mode active, resending robot program to arm: %s", arm)
                self.call_arm_service(arm, "resend_robot_program", Trigger, dashboard=False)
                rospy.sleep(2)
                self.call_arm_service(arm, "resend_robot_program", Trigger, dashboard=False)
                sleep_time = True
        return sleep_time

    def release_arm(self):
        try:
            rospy.loginfo("Unlock arm(s) signal received. Checking arms.")
            rospy.loginfo("Checking e-stops ...")
            self.check_arms_e_stops()
            rospy.loginfo("Checking protective stops ...")
            self.unlock_arms_if_protective_stop()
            rospy.loginfo("Checking for faults ...")
            if self.unlock_arms_if_fault():
                rospy.loginfo("Resetting robot safety, please wait approximately 15 seconds...")
                rospy.sleep(15)
            rospy.loginfo("Checking protective stops again ...")
            self.unlock_arms_if_protective_stop()
            rospy.loginfo("Closing popups ...")
            self.clear_arms_popups()
            rospy.loginfo("Checking robot mode ...")
            if self.check_arms_robot_mode():
                self.startup_arms()
            rospy.loginfo("Checking if program is loaded ...")
            if self.load_arms_program_if_unloaded():
                rospy.sleep(2)
            rospy.loginfo("Checking if program is running ...")
            if self.start_arms_program_if_stopped():
                rospy.sleep(5)
        except rospy.ServiceException, e:
            for arm in self._arms:
                rospy.logerr("Arm checking/restarting failed for arm: %s. %s", arm, e)


if __name__ == "__main__":
    rospy.init_node("sr_ur_arm_unlock")
    sr_ur_unlock = SrUrUnlock()
    rospy.spin()
