#!/usr/bin/env python3

# Copyright 2019 Shadow Robot Company Ltd.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation version 2 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <http://www.gnu.org/licenses/>.

from __future__ import absolute_import
from controller_manager_msgs.srv import (ListControllers, LoadController,
                                         SwitchController, SwitchControllerRequest)
import rospy
from sr_utilities.hand_finder import HandFinder
from sr_controllers_tools.sr_controller_helper import ControllerHelper
from sr_robot_msgs.msg import ControlType
from sr_robot_msgs.srv import (ChangeControlType, RobotTeachMode,
                               RobotTeachModeRequest, RobotTeachModeResponse, SetTeachMode)


class TeachModeManager(object):

    def __init__(self):
        hand_joint_names = ["ffj0", "ffj3", "ffj4",
                            "mfj0", "mfj3", "mfj4",
                            "rfj0", "rfj3", "rfj4",
                            "lfj0", "lfj3", "lfj4", "lfj5",
                            "thj1", "thj2", "thj3", "thj4", "thj5",
                            "wrj1", "wrj2"]
        self.s = rospy.Service('teach_mode', RobotTeachMode, self.teach_mode)
        self.ctrl_helpers = {
            "right_hand": ControllerHelper(["rh"], ["rh_"], hand_joint_names),
            "left_hand": ControllerHelper(["lh"], ["lh_"], hand_joint_names),
            "right_arm": ControllerHelper(["ra"], ["ra_"], hand_joint_names),
            "left_arm": ControllerHelper(["la"], ["la_"], hand_joint_names)
        }

        self.modes = ["TRAJECTORY_MODE", "TEACH_MODE", "POSITION_MODE", "GRASP_MODE"]

    def teach_mode(self, req):

        if req.robot == "right_arm" or req.robot == "left_arm":
            if req.teach_mode == RobotTeachModeRequest.TRAJECTORY_MODE \
                    or req.teach_mode == RobotTeachModeRequest.POSITION_MODE:

                rospy.loginfo(
                    "Changing %s to position (non-teach) mode", req.robot)

                if not self.ctrl_helpers[req.robot].change_arm_teach_mode(False):
                    rospy.logerr("Could not set %s teach mode", req.robot)
                    return RobotTeachModeResponse(RobotTeachModeResponse.ERROR)

                if req.teach_mode == RobotTeachModeRequest.POSITION_MODE:
                    rospy.loginfo(
                        "Changing %s trajectory controllers to STOP", req.robot)
                    self.ctrl_helpers[req.robot].change_trajectory_ctrl("stop")
                    return RobotTeachModeResponse(RobotTeachModeResponse.SUCCESS)

                rospy.loginfo(
                    "Changing %s trajectory controllers to RUN", req.robot)
                self.ctrl_helpers[req.robot].change_trajectory_ctrl("run")
                return RobotTeachModeResponse(RobotTeachModeResponse.SUCCESS)

            elif req.teach_mode == RobotTeachModeRequest.TEACH_MODE:
                rospy.loginfo("Changing %s to teach mode", req.robot)

                if not self.ctrl_helpers[req.robot].change_arm_teach_mode(True):
                    rospy.logerr("Could not set %s teach mode", req.robot)
                    return RobotTeachModeResponse(RobotTeachModeResponse.ERROR)

                rospy.loginfo(
                    "Changing %s trajectory controllers to STOP", req.robot)
                self.ctrl_helpers[req.robot].change_trajectory_ctrl("stop")
                return RobotTeachModeResponse(RobotTeachModeResponse.SUCCESS)

            else:
                rospy.logerr("Unknown teach mode: %u", req.teach_mode)
                return RobotTeachModeResponse(RobotTeachModeResponse.ERROR)

        elif req.robot == "right_hand" or req.robot == "left_hand":
            change_type_msg = ChangeControlType()
            if req.teach_mode == RobotTeachModeRequest.TRAJECTORY_MODE \
                    or req.teach_mode == RobotTeachModeRequest.POSITION_MODE:

                change_type_msg.control_type = ControlType.PWM
                rospy.loginfo("Changing %s Control mode to PWM", req.robot)
                self.ctrl_helpers[
                    req.robot].change_force_ctrl_type(change_type_msg)
                rospy.loginfo("Changing %s controllers to position", req.robot)
                self.ctrl_helpers[req.robot].change_hand_ctrl("position")

                if req.teach_mode == RobotTeachModeRequest.POSITION_MODE:
                    rospy.loginfo(
                        "Changing %s trajectory controllers to STOP", req.robot)
                    self.ctrl_helpers[req.robot].change_trajectory_ctrl("stop")
                    return RobotTeachModeResponse(RobotTeachModeResponse.SUCCESS)

                rospy.loginfo(
                    "Changing %s trajectory controllers to RUN", req.robot)
                self.ctrl_helpers[req.robot].change_trajectory_ctrl("run")
                return RobotTeachModeResponse(RobotTeachModeResponse.SUCCESS)

            elif req.teach_mode == RobotTeachModeRequest.TEACH_MODE:
                change_type_msg.control_type = ControlType.FORCE
                rospy.loginfo("Changing %s Control mode to FORCE", req.robot)
                self.ctrl_helpers[
                    req.robot].change_force_ctrl_type(change_type_msg)
                rospy.loginfo("Changing %s controllers to effort", req.robot)
                self.ctrl_helpers[req.robot].change_hand_ctrl("effort")
                rospy.loginfo(
                    "Changing %s trajectory controllers to STOP", req.robot)
                self.ctrl_helpers[req.robot].change_trajectory_ctrl("stop")

                return RobotTeachModeResponse(RobotTeachModeResponse.SUCCESS)
            else:
                rospy.logerr("Unknown mode: {}".format(self.modes[req.teach_mode]))
                return RobotTeachModeResponse(RobotTeachModeResponse.ERROR)
        else:
            rospy.logerr("Unknown robot: %s", req.robot)
            return RobotTeachModeResponse(RobotTeachModeResponse.ERROR)


if __name__ == "__main__":
    rospy.init_node("teach_mode_node")

    manager = TeachModeManager()

    rospy.spin()
