#!/usr/bin/env python

from controller_manager_msgs.srv import (ListControllers, LoadController,
                                         SwitchController, SwitchControllerRequest)
import rospy
from sr_robot_msgs.msg import ControlType
from sr_robot_msgs.srv import (ChangeControlType, RobotTeachMode,
                               RobotTeachModeRequest, RobotTeachModeResponse, SetTeachMode)


class ControllerHelper(object):

    def __init__(self, robot_ids, robot_joint_prefixes):
        self.time_to_reload_params = 6.0
        self.robot_ids = robot_ids
        self.robot_joint_prefixes = robot_joint_prefixes

        # This section will only be used for hands
        self.joints = ["ffj0", "ffj3", "ffj4",
                       "mfj0", "mfj3", "mfj4",
                       "rfj0", "rfj3", "rfj4",
                       "lfj0", "lfj3", "lfj4", "lfj5",
                       "thj1", "thj2", "thj3", "thj4", "thj5",
                       "wrj1", "wrj2"]
        self.hand_controllers = {
            "effort": ["sh_{0}{1}_effort_controller".format(hand_joint_prefix, joint)
                       for joint in self.joints
                       for hand_joint_prefix in self.robot_joint_prefixes],
            "position": ["sh_{0}{1}_position_controller".format(hand_joint_prefix, joint)
                         for joint in self.joints
                         for hand_joint_prefix in self.robot_joint_prefixes],
            "mixed": ["sh_{0}{1}_mixed_position_velocity_controller".format(hand_joint_prefix, joint)
                      for joint in self.joints
                      for hand_joint_prefix in self.robot_joint_prefixes],
            "velocity": ["sh_{0}{1}_velocity_controller".format(hand_joint_prefix, joint)
                         for joint in self.joints
                         for hand_joint_prefix in self.robot_joint_prefixes],
            "stop": []}
        self.managed_hand_controllers = [
            cont for type_conts in self.hand_controllers.itervalues() for cont in type_conts]

        # This section is for any robot
        self.trajectory_controllers = {
            "run": ["{0}_trajectory_controller".format(robot_id) for robot_id in self.robot_ids],
            "stop": []}
        self.managed_trajectory_controllers = [
            cont for type_conts in self.trajectory_controllers.itervalues() for cont in type_conts]

    @staticmethod
    def _change_ctrl(controllers, managed_controllers):
        """
        Switch the current controller
        """
        success = True
        list_controllers = rospy.ServiceProxy(
            'controller_manager/list_controllers', ListControllers)
        try:
            resp1 = list_controllers()
        except rospy.ServiceException:
            success = False

        if success:
            controllers_to_stop = [
                c.name for c in resp1.controller if c.state == "running" and c.name in managed_controllers]
            all_loaded_controllers = [c.name for c in resp1.controller]

            controllers_to_start = controllers

            for load_control in controllers_to_start:
                if load_control not in all_loaded_controllers:
                    try:
                        load_controllers = rospy.ServiceProxy(
                            'controller_manager/load_controller', LoadController)
                        resp1 = load_controllers(load_control)
                    except rospy.ServiceException:
                        success = False
                    if not resp1.ok:
                        success = False

            switch_controllers = rospy.ServiceProxy(
                'controller_manager/switch_controller', SwitchController)
            try:
                resp1 = switch_controllers(
                    controllers_to_start, controllers_to_stop, SwitchControllerRequest.BEST_EFFORT)
            except rospy.ServiceException:
                success = False

            if not resp1.ok:
                success = False

        if not success:
            rospy.logwarn(
                "Failed to change some of the controllers. This is normal if this is not a 5 finger hand.")

        return success

    def change_hand_ctrl(self, controller):
        return self._change_ctrl(self.hand_controllers[controller], self.managed_hand_controllers)

    def change_trajectory_ctrl(self, controller):
        return self._change_ctrl(self.trajectory_controllers[controller],
                                 self.managed_trajectory_controllers)

    def change_force_ctrl_type(self, chng_type_msg):
        """
        Calls the service (sr_hand_robot/change_control_type) that allows to tell the driver (sr_robot_lib)
        which type of force control has to be sent to the motor:
            - torque demand (sr_robot_msgs::ControlType::FORCE)
            - PWM (sr_robot_msgs::ControlType::PWM)
        it will block for time_to_reload_params secs to allow hand_controllers parameters to be updated
        """
        success = True
        for hand_id in self.robot_ids:
            change_control_type = rospy.ServiceProxy(
                'sr_hand_robot/' + hand_id + '/change_control_type', ChangeControlType)
            try:
                resp1 = change_control_type(chng_type_msg)
                if resp1.result.control_type != chng_type_msg.control_type:
                    success = False
            except rospy.ServiceException:
                success = False

        # Allow some time to reload parameters
        rospy.sleep(self.time_to_reload_params)

        if not success:
            rospy.logwarn("Failed to change the control type.")

        return success

    def change_arm_teach_mode(self, teach_mode):
        success = True
#         set_teach_msg = SetTeachMode()
#         set_teach_msg.teach_mode = teach_mode
        for arm_id in self.robot_ids:
            rospy.loginfo(
                "Calling service %s", arm_id + '_sr_ur_controller/set_teach_mode')
            change_teach_mode = rospy.ServiceProxy(
                arm_id + '_sr_ur_robot_hw/set_teach_mode', SetTeachMode)
            try:
                resp = change_teach_mode(teach_mode)
                success = resp.success
            except rospy.ServiceException:
                success = False
        return success


class TeachModeManager(object):

    def __init__(self):
        self.s = rospy.Service('teach_mode', RobotTeachMode, self.teach_mode)
        self.ctrl_helpers = {"right_hand": ControllerHelper(["rh"], ["rh_"]),
                             "left_hand": ControllerHelper(["lh"], ["lh_"]),
                             "right_arm": ControllerHelper(["ra"], ["ra_"]),
                             "left_arm": ControllerHelper(["la"], ["la_"])}

    def teach_mode(self, req):

        if req.robot == "right_arm" or req.robot == "left_arm":
            if req.teach_mode == RobotTeachModeRequest.TRAJECTORY_MODE \
                    or req.teach_mode == RobotTeachModeRequest.POSITION_MODE:

                rospy.loginfo(
                    "Changing %s to position (non-teach) mode", req.robot)

                if not self.ctrl_helpers[req.robot].change_arm_teach_mode(False):
                    rospy.logerr("Could not set %s teach mode", req.robot)
                    return RobotTeachModeResponse(RobotTeachModeResponse.ERROR)

                if req.teach_mode == RobotTeachModeRequest.POSITION_MODE:
                    rospy.loginfo(
                        "Changing %s trajectory controllers to STOP", req.robot)
                    self.ctrl_helpers[req.robot].change_trajectory_ctrl("stop")
                    return RobotTeachModeResponse(RobotTeachModeResponse.SUCCESS)

                rospy.loginfo(
                    "Changing %s trajectory controllers to RUN", req.robot)
                self.ctrl_helpers[req.robot].change_trajectory_ctrl("run")
                return RobotTeachModeResponse(RobotTeachModeResponse.SUCCESS)

            elif req.teach_mode == RobotTeachModeRequest.TEACH_MODE:
                rospy.loginfo("Changing %s to teach mode", req.robot)

                if not self.ctrl_helpers[req.robot].change_arm_teach_mode(True):
                    rospy.logerr("Could not set %s teach mode", req.robot)
                    return RobotTeachModeResponse(RobotTeachModeResponse.ERROR)

                rospy.loginfo(
                    "Changing %s trajectory controllers to STOP", req.robot)
                self.ctrl_helpers[req.robot].change_trajectory_ctrl("stop")
                return RobotTeachModeResponse(RobotTeachModeResponse.SUCCESS)

            else:
                rospy.logerr("Unknown teach mode: %u", req.teach_mode)
                return RobotTeachModeResponse(RobotTeachModeResponse.ERROR)

        elif req.robot == "right_hand" or req.robot == "left_hand":
            change_type_msg = ChangeControlType()
            if req.teach_mode == RobotTeachModeRequest.TRAJECTORY_MODE \
                    or req.teach_mode == RobotTeachModeRequest.POSITION_MODE:

                change_type_msg.control_type = ControlType.PWM
                rospy.loginfo("Changing %s Control mode to PWM", req.robot)
                self.ctrl_helpers[
                    req.robot].change_force_ctrl_type(change_type_msg)
                rospy.loginfo("Changing %s controllers to position", req.robot)
                self.ctrl_helpers[req.robot].change_hand_ctrl("position")

                if req.teach_mode == RobotTeachModeRequest.POSITION_MODE:
                    rospy.loginfo(
                        "Changing %s trajectory controllers to STOP", req.robot)
                    self.ctrl_helpers[req.robot].change_trajectory_ctrl("stop")
                    return RobotTeachModeResponse(RobotTeachModeResponse.SUCCESS)

                rospy.loginfo(
                    "Changing %s trajectory controllers to RUN", req.robot)
                self.ctrl_helpers[req.robot].change_trajectory_ctrl("run")
                return RobotTeachModeResponse(RobotTeachModeResponse.SUCCESS)

            elif req.teach_mode == RobotTeachModeRequest.TEACH_MODE:
                change_type_msg.control_type = ControlType.FORCE
                rospy.loginfo("Changing %s Control mode to FORCE", req.robot)
                self.ctrl_helpers[
                    req.robot].change_force_ctrl_type(change_type_msg)
                rospy.loginfo("Changing %s controllers to effort", req.robot)
                self.ctrl_helpers[req.robot].change_hand_ctrl("effort")
                rospy.loginfo(
                    "Changing %s trajectory controllers to STOP", req.robot)
                self.ctrl_helpers[req.robot].change_trajectory_ctrl("stop")

                return RobotTeachModeResponse(RobotTeachModeResponse.SUCCESS)
            else:
                rospy.logerr("Unknown teach mode: %u", req.teach_mode)
                return RobotTeachModeResponse(RobotTeachModeResponse.ERROR)
        else:
            rospy.logerr("Unknown robot: %s", req.robot)
            return RobotTeachModeResponse(RobotTeachModeResponse.ERROR)

if __name__ == "__main__":
    rospy.init_node("teach_mode_node")

    manager = TeachModeManager()

    rospy.spin()
